const state = {
  task:[],
  statuses:[],
  due_notifies:[],
  errors:{},
     form:{
      title:'',
      description:'',
            due_at:'',
            notified:'',
            status_id:'',
            search:'',
          },
};

const mutations = {
  setForm(state,form){
    state.task=form;
  },
  setTask(state,task){
   state.task=task;
  },
  setStatuses(state,data){
    state.statuses=data;
  },
  setDueNotifies(state,data){
    state.due_notifies=data;
  },
  setErrors(state,error){
    state.errors=error;
  },
  updateTaskTitle(state,title){
    state.task.title = title;
  },
  updateTaskDescription(state,description){
    state.task.description = description;
  },
  updateTaskStatus(state,status){
    state.task.status_id = status.id;
    state.task.status=status;
  },
  updateTaskDue(state,{ dueAt, notified, dueAtUtc }){
    state.task.due_at = dueAt;
    state.task.notified= notified;
    state.task.due_at_utc= dueAtUtc;
  },

  updateTaskMembers(state,members){
    state.task.members = members;
  },
  unassignTaskMember(state,memberId){
    const index = state.task.members.findIndex(member => member.id === memberId);
    if (index !== -1) {
      state.task.members.splice(index, 1);
    }
  },
};

const actions = {
  loadStatuses({ commit }) {
      return axios.get(`/api/v1/task/statuses`)
        .then(response => {
        commit('setStatuses', response.data.statuses);
        commit('setDueNotifies', response.data.due_notifies);
        })
        .catch(error => {
          //console.log(error.response.data.errors);
        })
      },
};

export default{
  namespaced: true,
  state,
  mutations,
  actions,
}