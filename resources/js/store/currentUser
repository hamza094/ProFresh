import router from '../router.js';
import Vue from 'vue';

const state = {
  user:{},
  errors:{},
  loggedIn:false,
  current_access_token:'',
};
const getters = {};
const actions = {
  handleLoginResponse({ commit, dispatch }, response) {
    if (response.data.status === '2fa_required') {
      localStorage.setItem('twofa_pending', 'true');
      localStorage.setItem('twofa_timestamp', Date.now());
      router.push({ name: 'TwoFACode' });
      return;
    }
    this.$vToastify.success('You have successfully logged in to the site');    
    localStorage.removeItem('twofa_pending');
    localStorage.removeItem('twofa_timestamp');
    dispatch('createUserToken', response);
    commit('setUser', response.data.user);
    commit('loggedIn', true);
    commit('setToken', response.data.access_token);
    dispatch('subscribeUser/userSubscription', null, { root: true });
    router.push('/home');
    commit('setErrors', '');
  },

  loginUser({ commit, dispatch }, user) {
    Vue.prototype.$Progress.start();
    axios.post('/api/v1/login', user)
      .then(response => {
        dispatch('handleLoginResponse', response);
        Vue.prototype.$Progress.finish();
      })
      .catch(error => {
        Vue.prototype.$Progress.fail();
        commit('setErrors', error.response.data.errors);
      });
  },

createUserToken({commit},response){
  let accessToken= JSON.stringify('Bearer ' + response.data.access_token);

  let bearerToken= accessToken.replace(/\n/g, '');
  localStorage.setItem('token',bearerToken);
},

logoutUser({commit,state}){
   axios.post('/api/v1/logout',{
}).then(response=>{
    localStorage.removeItem('token');
    commit('setUser',null);
    commit('loggedIn',false);
    router.push('/login');
   }).catch(error=>{
     this.errors=error.response.data.errors;
});
},

deleteUser({commit,state}){
    localStorage.removeItem('token');
    commit('setUser',null);
    commit('loggedIn',false);
    router.push('/home');
},

updateVerifiedStatus({ commit }, isVerified) {
    // Update the user's verified status
    commit('setUserVerified', isVerified);
  }

};
const mutations = {
  setErrors(state,data){
    state.errors=data;
  },
  clearErrors(state) {
    state.errors = {};
  },
  setUser(state,data){
    state.user=data;
  },
  loggedIn(state,data){
    state.loggedIn=data;
  },
  setUserVerified(state, isVerified) {
    if (state.user) {
      state.user.verified = isVerified;
    }
  },
  setToken(state,token){
    state.current_access_token = token;
  }
};

export default{
  namespaced: true,
  state,
  getters,
  actions,
  mutations
}
