const state = {
  project:[],
  user:{},
  getStage:0,
  tasks:{
    data: [],
    links: {},
    meta: {}
  },
  archivedTasks:[],
};


const mutations = {
setTasks(state,tasksData) {
    state.tasks = tasksData.tasks;
  },
  removeTaskFromState(state, taskId){
    const index = state.tasks.data.findIndex(task => task.id === taskId);
    if (index !== -1) {
      state.tasks.data.splice(index, 1);
    }
  },

  setArchivedTasks(state, archivetasksData) {
    state.archivedTasks = [...archivetasksData];
  },
  pushArchivedTask(state, task){
        state.archivedTasks.unshift(task);
  },
  removeArchivedTask(state, taskId){
    const index = state.archivedTasks.findIndex(task => task.id === taskId);
    if (index !== -1) {
      state.archivedTasks.splice(index, 1);
    }
  },

    setProject(state, project) {
      state.project = project
      state.user = project.user
      state.getStage = project.stage.id
      state.members.unshift(project.user)
    },
    nameUpdate(state,name,slug){
      state.project.name = name
      state.project.slug = slug
    },
    aboutUpdate(state,about){
      state.project.about = about
    },
    updateNotes(state,notes){
      state.project.notes = notes
    },
    detachMember(state,memberId){
      const index = state.project.members.findIndex(member => member.id === memberId);
      if (index !== -1) {
        state.project.members.splice(index, 1);
      }
    },
    addScore(state,score){
      state.project.score += score       
    },
    reduceScore(state,score){
      state.project.score -= score
    },
    noteScore(state,score){
      state.project.score = score
    },
    updateStage(state,data){
    state.project.stage_updated_at = data.stage_updated
    state.project.stage = data.current_stage
    state.project.completed = data.completed
    state.project.postponed= data.postponed
    state.getStage=data.getStage
    },

};

const actions = {
   loadProject({ commit }, slug) {
      return axios.get(`/api/v1/projects/${slug}`)
        .then(response => {
        commit('setProject', response.data);

        this.$bus.emit('projectSlug',{slug:response.data.slug});
        })
        .catch(error => {
          //console.log(error.response.data.errors);
        })
      },

    fetchTasks({ commit }, { slug, page }) {
       return axios.get(`/api/v1/projects/${slug}/tasks?page=${page}`)
        .then(response => {
          commit('setTasks', { page, tasks: response.data.tasksData });
        });
    },

      loadArchiveTasks({ commit }, slug) {
      return axios.get(`/api/v1/projects/${slug}/tasks`,{
         params: {
        request: 'archived'
      }
      }).then(response => {
        console.log(response); 
        commit('setArchivedTasks', response.data.tasksData);

        })
        .catch(error => {
          console.log(error.response.data.errors);
        })
      },
};

export default{
  namespaced: true,
  state,
  mutations,
  actions,
}
